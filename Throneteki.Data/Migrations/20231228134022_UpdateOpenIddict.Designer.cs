// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Throneteki.Data;

#nullable disable

namespace Throneteki.Data.Migrations
{
    [DbContext(typeof(ThronetekiDbContext))]
    [Migration("20231228134022_UpdateOpenIddict")]
    partial class UpdateOpenIddict
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationType")
                        .HasColumnType("text")
                        .HasColumnName("application_type");

                    b.Property<string>("ClientId")
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text")
                        .HasColumnName("client_secret");

                    b.Property<string>("ClientType")
                        .HasColumnType("text")
                        .HasColumnName("client_type");

                    b.Property<string>("ConcurrencyToken")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_token");

                    b.Property<string>("ConsentType")
                        .HasColumnType("text")
                        .HasColumnName("consent_type");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text")
                        .HasColumnName("display_names");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("text")
                        .HasColumnName("json_web_key_set");

                    b.Property<string>("Permissions")
                        .HasColumnType("text")
                        .HasColumnName("permissions");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text")
                        .HasColumnName("post_logout_redirect_uris");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text")
                        .HasColumnName("redirect_uris");

                    b.Property<string>("Requirements")
                        .HasColumnType("text")
                        .HasColumnName("requirements");

                    b.Property<string>("Settings")
                        .HasColumnType("text")
                        .HasColumnName("settings");

                    b.HasKey("Id")
                        .HasName("pk_open_iddict_applications");

                    b.ToTable("open_iddict_applications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text")
                        .HasColumnName("application_id");

                    b.Property<string>("ConcurrencyToken")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_token");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<string>("Scopes")
                        .HasColumnType("text")
                        .HasColumnName("scopes");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_open_iddict_authorizations");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("ix_open_iddict_authorizations_application_id");

                    b.ToTable("open_iddict_authorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyToken")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_token");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text")
                        .HasColumnName("descriptions");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text")
                        .HasColumnName("display_names");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<string>("Resources")
                        .HasColumnType("text")
                        .HasColumnName("resources");

                    b.HasKey("Id")
                        .HasName("pk_open_iddict_scopes");

                    b.ToTable("open_iddict_scopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text")
                        .HasColumnName("application_id");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("text")
                        .HasColumnName("authorization_id");

                    b.Property<string>("ConcurrencyToken")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_token");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<string>("Payload")
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("redemption_date");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("text")
                        .HasColumnName("reference_id");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_open_iddict_tokens");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("ix_open_iddict_tokens_application_id");

                    b.HasIndex("AuthorizationId")
                        .HasDatabaseName("ix_open_iddict_tokens_authorization_id");

                    b.ToTable("open_iddict_tokens", (string)null);
                });

            modelBuilder.Entity("Throneteki.Data.Models.BlocklistEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BlockedUserId")
                        .HasColumnType("text")
                        .HasColumnName("blocked_user_id");

                    b.Property<string>("ThronetekiUserId")
                        .HasColumnType("text")
                        .HasColumnName("throneteki_user_id");

                    b.HasKey("Id")
                        .HasName("pk_blocklist_entries");

                    b.HasIndex("BlockedUserId")
                        .HasDatabaseName("ix_blocklist_entries_blocked_user_id");

                    b.HasIndex("ThronetekiUserId")
                        .HasDatabaseName("ix_blocklist_entries_throneteki_user_id");

                    b.ToTable("blocklist_entries", (string)null);
                });

            modelBuilder.Entity("Throneteki.Data.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Claim")
                        .HasColumnType("integer")
                        .HasColumnName("claim");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("Cost")
                        .HasColumnType("integer")
                        .HasColumnName("cost");

                    b.Property<int>("DeckLimit")
                        .HasColumnType("integer")
                        .HasColumnName("deck_limit");

                    b.Property<int>("FactionId")
                        .HasColumnType("integer")
                        .HasColumnName("faction_id");

                    b.Property<string>("Flavor")
                        .HasColumnType("text")
                        .HasColumnName("flavor");

                    b.Property<string>("Icons")
                        .HasColumnType("text")
                        .HasColumnName("icons");

                    b.Property<string>("Illustrator")
                        .HasColumnType("text")
                        .HasColumnName("illustrator");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int?>("Income")
                        .HasColumnType("integer")
                        .HasColumnName("income");

                    b.Property<int?>("Initiative")
                        .HasColumnType("integer")
                        .HasColumnName("initiative");

                    b.Property<bool>("Intrigue")
                        .HasColumnType("boolean")
                        .HasColumnName("intrigue");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<bool>("Loyal")
                        .HasColumnType("boolean")
                        .HasColumnName("loyal");

                    b.Property<bool>("Military")
                        .HasColumnType("boolean")
                        .HasColumnName("military");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PackId")
                        .HasColumnType("integer")
                        .HasColumnName("pack_id");

                    b.Property<bool>("Power")
                        .HasColumnType("boolean")
                        .HasColumnName("power");

                    b.Property<int?>("Reserve")
                        .HasColumnType("integer")
                        .HasColumnName("reserve");

                    b.Property<int?>("Strength")
                        .HasColumnType("integer")
                        .HasColumnName("strength");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("Traits")
                        .HasColumnType("text")
                        .HasColumnName("traits");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<bool>("Unique")
                        .HasColumnType("boolean")
                        .HasColumnName("unique");

                    b.HasKey("Id")
                        .HasName("pk_cards");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_cards_code");

                    b.HasIndex("FactionId")
                        .HasDatabaseName("ix_cards_faction_id");

                    b.HasIndex("PackId")
                        .HasDatabaseName("ix_cards_pack_id");

                    b.ToTable("cards", (string)null);
                });

            modelBuilder.Entity("Throneteki.Data.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgendaId")
                        .HasColumnType("integer")
                        .HasColumnName("agenda_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<int>("FactionId")
                        .HasColumnType("integer")
                        .HasColumnName("faction_id");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("boolean")
                        .HasColumnName("is_favourite");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_decks");

                    b.HasIndex("AgendaId")
                        .HasDatabaseName("ix_decks_agenda_id");

                    b.HasIndex("FactionId")
                        .HasDatabaseName("ix_decks_faction_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_decks_user_id");

                    b.ToTable("decks", (string)null);
                });

            modelBuilder.Entity("Throneteki.Data.Models.DeckCard", b =>
                {
                    b.Property<int>("DeckId")
                        .HasColumnType("integer")
                        .HasColumnName("deck_id");

                    b.Property<int>("CardId")
                        .HasColumnType("integer")
                        .HasColumnName("card_id");

                    b.Property<int>("CardType")
                        .HasColumnType("integer")
                        .HasColumnName("card_type");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.HasKey("DeckId", "CardId")
                        .HasName("pk_deck_cards");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_deck_cards_card_id");

                    b.ToTable("deck_cards", (string)null);
                });

            modelBuilder.Entity("Throneteki.Data.Models.ExternalToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_external_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_external_tokens_user_id");

                    b.ToTable("external_tokens", (string)null);
                });

            modelBuilder.Entity("Throneteki.Data.Models.Faction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_factions");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_factions_code");

                    b.ToTable("factions", (string)null);
                });

            modelBuilder.Entity("Throneteki.Data.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("WinReason")
                        .HasColumnType("text")
                        .HasColumnName("win_reason");

                    b.Property<string>("WinnerId")
                        .HasColumnType("text")
                        .HasColumnName("winner_id");

                    b.HasKey("Id")
                        .HasName("pk_games");

                    b.HasIndex("WinnerId")
                        .HasDatabaseName("ix_games_winner_id");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("Throneteki.Data.Models.GamePlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeckId")
                        .HasColumnType("integer")
                        .HasColumnName("deck_id");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_id");

                    b.Property<int>("TotalPower")
                        .HasColumnType("integer")
                        .HasColumnName("total_power");

                    b.HasKey("Id")
                        .HasName("pk_game_players");

                    b.HasIndex("DeckId")
                        .HasDatabaseName("ix_game_players_deck_id");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_players_game_id");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_game_players_player_id");

                    b.ToTable("game_players", (string)null);
                });

            modelBuilder.Entity("Throneteki.Data.Models.LobbyMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime>("PostedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date_time");

                    b.Property<string>("PosterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("poster_id");

                    b.HasKey("Id")
                        .HasName("pk_lobby_messages");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_lobby_messages_deleted_by_id");

                    b.HasIndex("PosterId")
                        .HasDatabaseName("ix_lobby_messages_poster_id");

                    b.ToTable("lobby_messages", (string)null);
                });

            modelBuilder.Entity("Throneteki.Data.Models.NewsEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_at");

                    b.Property<string>("PostedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("posted_by_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_news");

                    b.HasIndex("PostedById")
                        .HasDatabaseName("ix_news_posted_by_id");

                    b.ToTable("news", (string)null);
                });

            modelBuilder.Entity("Throneteki.Data.Models.Pack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("release_date");

                    b.HasKey("Id")
                        .HasName("pk_packs");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_packs_code");

                    b.ToTable("packs", (string)null);
                });

            modelBuilder.Entity("Throneteki.Data.Models.ProfileImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.HasKey("Id")
                        .HasName("pk_profile_images");

                    b.ToTable("profile_images", (string)null);
                });

            modelBuilder.Entity("Throneteki.Data.Models.ThronetekiRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Throneteki.Data.Models.ThronetekiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<Guid?>("ProfileImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_image_id");

                    b.Property<DateTime>("RegisteredDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registered_date_time");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<string>("Settings")
                        .HasColumnType("text")
                        .HasColumnName("settings");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ProfileImageId")
                        .HasDatabaseName("ix_users_profile_image_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Throneteki.Data.Models.ThronetekiUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Throneteki.Data.Models.ThronetekiRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Throneteki.Data.Models.ThronetekiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Throneteki.Data.Models.ThronetekiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Throneteki.Data.Models.ThronetekiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_open_iddict_authorizations_open_iddict_entity_framework_cor");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_open_iddict_tokens_open_iddict_entity_framework_core_applic");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId")
                        .HasConstraintName("fk_open_iddict_tokens_open_iddict_entity_framework_core_author");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("Throneteki.Data.Models.BlocklistEntry", b =>
                {
                    b.HasOne("Throneteki.Data.Models.ThronetekiUser", "BlockedUser")
                        .WithMany()
                        .HasForeignKey("BlockedUserId")
                        .HasConstraintName("fk_blocklist_entries_users_blocked_user_id");

                    b.HasOne("Throneteki.Data.Models.ThronetekiUser", "ThronetekiUser")
                        .WithMany("BlockListEntries")
                        .HasForeignKey("ThronetekiUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_blocklist_entries_users_throneteki_user_id");

                    b.Navigation("BlockedUser");

                    b.Navigation("ThronetekiUser");
                });

            modelBuilder.Entity("Throneteki.Data.Models.Card", b =>
                {
                    b.HasOne("Throneteki.Data.Models.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_factions_faction_id");

                    b.HasOne("Throneteki.Data.Models.Pack", "Pack")
                        .WithMany("Cards")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_packs_pack_id");

                    b.Navigation("Faction");

                    b.Navigation("Pack");
                });

            modelBuilder.Entity("Throneteki.Data.Models.Deck", b =>
                {
                    b.HasOne("Throneteki.Data.Models.Card", "Agenda")
                        .WithMany()
                        .HasForeignKey("AgendaId")
                        .HasConstraintName("fk_decks_cards_agenda_id");

                    b.HasOne("Throneteki.Data.Models.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_decks_factions_faction_id");

                    b.HasOne("Throneteki.Data.Models.ThronetekiUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_decks_users_user_id");

                    b.Navigation("Agenda");

                    b.Navigation("Faction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Throneteki.Data.Models.DeckCard", b =>
                {
                    b.HasOne("Throneteki.Data.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deck_cards_cards_card_id");

                    b.HasOne("Throneteki.Data.Models.Deck", "Deck")
                        .WithMany("DeckCards")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deck_cards_decks_deck_id");

                    b.Navigation("Card");

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("Throneteki.Data.Models.ExternalToken", b =>
                {
                    b.HasOne("Throneteki.Data.Models.ThronetekiUser", "User")
                        .WithMany("ExternalTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_external_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Throneteki.Data.Models.Game", b =>
                {
                    b.HasOne("Throneteki.Data.Models.ThronetekiUser", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .HasConstraintName("fk_games_users_winner_id");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Throneteki.Data.Models.GamePlayer", b =>
                {
                    b.HasOne("Throneteki.Data.Models.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_players_decks_deck_id");

                    b.HasOne("Throneteki.Data.Models.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_players_games_game_id");

                    b.HasOne("Throneteki.Data.Models.ThronetekiUser", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_players_users_player_id");

                    b.Navigation("Deck");

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Throneteki.Data.Models.LobbyMessage", b =>
                {
                    b.HasOne("Throneteki.Data.Models.ThronetekiUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_lobby_messages_users_deleted_by_id");

                    b.HasOne("Throneteki.Data.Models.ThronetekiUser", "Poster")
                        .WithMany()
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lobby_messages_users_poster_id");

                    b.Navigation("DeletedBy");

                    b.Navigation("Poster");
                });

            modelBuilder.Entity("Throneteki.Data.Models.NewsEntry", b =>
                {
                    b.HasOne("Throneteki.Data.Models.ThronetekiUser", "PostedBy")
                        .WithMany()
                        .HasForeignKey("PostedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_users_posted_by_id");

                    b.Navigation("PostedBy");
                });

            modelBuilder.Entity("Throneteki.Data.Models.ThronetekiUser", b =>
                {
                    b.HasOne("Throneteki.Data.Models.ProfileImage", "ProfileImage")
                        .WithMany()
                        .HasForeignKey("ProfileImageId")
                        .HasConstraintName("fk_users_profile_image_profile_image_id");

                    b.Navigation("ProfileImage");
                });

            modelBuilder.Entity("Throneteki.Data.Models.ThronetekiUserRole", b =>
                {
                    b.HasOne("Throneteki.Data.Models.ThronetekiRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Throneteki.Data.Models.ThronetekiUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Throneteki.Data.Models.Deck", b =>
                {
                    b.Navigation("DeckCards");
                });

            modelBuilder.Entity("Throneteki.Data.Models.Game", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Throneteki.Data.Models.Pack", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Throneteki.Data.Models.ThronetekiRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Throneteki.Data.Models.ThronetekiUser", b =>
                {
                    b.Navigation("BlockListEntries");

                    b.Navigation("ExternalTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
